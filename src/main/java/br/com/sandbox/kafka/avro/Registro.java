/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.sandbox.kafka.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Registro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8675048071698347264L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Registro\",\"namespace\":\"br.com.sandbox.kafka.avro\",\"fields\":[{\"name\":\"indice\",\"type\":\"int\"},{\"name\":\"texto\",\"type\":\"string\"},{\"name\":\"numero\",\"type\":\"double\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"uuid\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Registro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Registro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Registro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Registro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Registro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Registro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Registro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Registro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Registro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int indice;
  private java.lang.CharSequence texto;
  private double numero;
  private long timestamp;
  private java.lang.CharSequence uuid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Registro() {}

  /**
   * All-args constructor.
   * @param indice The new value for indice
   * @param texto The new value for texto
   * @param numero The new value for numero
   * @param timestamp The new value for timestamp
   * @param uuid The new value for uuid
   */
  public Registro(java.lang.Integer indice, java.lang.CharSequence texto, java.lang.Double numero, java.lang.Long timestamp, java.lang.CharSequence uuid) {
    this.indice = indice;
    this.texto = texto;
    this.numero = numero;
    this.timestamp = timestamp;
    this.uuid = uuid;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return indice;
    case 1: return texto;
    case 2: return numero;
    case 3: return timestamp;
    case 4: return uuid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: indice = (java.lang.Integer)value$; break;
    case 1: texto = (java.lang.CharSequence)value$; break;
    case 2: numero = (java.lang.Double)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: uuid = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'indice' field.
   * @return The value of the 'indice' field.
   */
  public int getIndice() {
    return indice;
  }


  /**
   * Sets the value of the 'indice' field.
   * @param value the value to set.
   */
  public void setIndice(int value) {
    this.indice = value;
  }

  /**
   * Gets the value of the 'texto' field.
   * @return The value of the 'texto' field.
   */
  public java.lang.CharSequence getTexto() {
    return texto;
  }


  /**
   * Sets the value of the 'texto' field.
   * @param value the value to set.
   */
  public void setTexto(java.lang.CharSequence value) {
    this.texto = value;
  }

  /**
   * Gets the value of the 'numero' field.
   * @return The value of the 'numero' field.
   */
  public double getNumero() {
    return numero;
  }


  /**
   * Sets the value of the 'numero' field.
   * @param value the value to set.
   */
  public void setNumero(double value) {
    this.numero = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Creates a new Registro RecordBuilder.
   * @return A new Registro RecordBuilder
   */
  public static br.com.sandbox.kafka.avro.Registro.Builder newBuilder() {
    return new br.com.sandbox.kafka.avro.Registro.Builder();
  }

  /**
   * Creates a new Registro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Registro RecordBuilder
   */
  public static br.com.sandbox.kafka.avro.Registro.Builder newBuilder(br.com.sandbox.kafka.avro.Registro.Builder other) {
    if (other == null) {
      return new br.com.sandbox.kafka.avro.Registro.Builder();
    } else {
      return new br.com.sandbox.kafka.avro.Registro.Builder(other);
    }
  }

  /**
   * Creates a new Registro RecordBuilder by copying an existing Registro instance.
   * @param other The existing instance to copy.
   * @return A new Registro RecordBuilder
   */
  public static br.com.sandbox.kafka.avro.Registro.Builder newBuilder(br.com.sandbox.kafka.avro.Registro other) {
    if (other == null) {
      return new br.com.sandbox.kafka.avro.Registro.Builder();
    } else {
      return new br.com.sandbox.kafka.avro.Registro.Builder(other);
    }
  }

  /**
   * RecordBuilder for Registro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Registro>
    implements org.apache.avro.data.RecordBuilder<Registro> {

    private int indice;
    private java.lang.CharSequence texto;
    private double numero;
    private long timestamp;
    private java.lang.CharSequence uuid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.sandbox.kafka.avro.Registro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.indice)) {
        this.indice = data().deepCopy(fields()[0].schema(), other.indice);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.texto)) {
        this.texto = data().deepCopy(fields()[1].schema(), other.texto);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.numero)) {
        this.numero = data().deepCopy(fields()[2].schema(), other.numero);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.uuid)) {
        this.uuid = data().deepCopy(fields()[4].schema(), other.uuid);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Registro instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.sandbox.kafka.avro.Registro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.indice)) {
        this.indice = data().deepCopy(fields()[0].schema(), other.indice);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.texto)) {
        this.texto = data().deepCopy(fields()[1].schema(), other.texto);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numero)) {
        this.numero = data().deepCopy(fields()[2].schema(), other.numero);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.uuid)) {
        this.uuid = data().deepCopy(fields()[4].schema(), other.uuid);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'indice' field.
      * @return The value.
      */
    public int getIndice() {
      return indice;
    }


    /**
      * Sets the value of the 'indice' field.
      * @param value The value of 'indice'.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder setIndice(int value) {
      validate(fields()[0], value);
      this.indice = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'indice' field has been set.
      * @return True if the 'indice' field has been set, false otherwise.
      */
    public boolean hasIndice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'indice' field.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder clearIndice() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'texto' field.
      * @return The value.
      */
    public java.lang.CharSequence getTexto() {
      return texto;
    }


    /**
      * Sets the value of the 'texto' field.
      * @param value The value of 'texto'.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder setTexto(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.texto = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'texto' field has been set.
      * @return True if the 'texto' field has been set, false otherwise.
      */
    public boolean hasTexto() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'texto' field.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder clearTexto() {
      texto = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'numero' field.
      * @return The value.
      */
    public double getNumero() {
      return numero;
    }


    /**
      * Sets the value of the 'numero' field.
      * @param value The value of 'numero'.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder setNumero(double value) {
      validate(fields()[2], value);
      this.numero = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'numero' field has been set.
      * @return True if the 'numero' field has been set, false otherwise.
      */
    public boolean hasNumero() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'numero' field.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder clearNumero() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.uuid = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public br.com.sandbox.kafka.avro.Registro.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Registro build() {
      try {
        Registro record = new Registro();
        record.indice = fieldSetFlags()[0] ? this.indice : (java.lang.Integer) defaultValue(fields()[0]);
        record.texto = fieldSetFlags()[1] ? this.texto : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.numero = fieldSetFlags()[2] ? this.numero : (java.lang.Double) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.uuid = fieldSetFlags()[4] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Registro>
    WRITER$ = (org.apache.avro.io.DatumWriter<Registro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Registro>
    READER$ = (org.apache.avro.io.DatumReader<Registro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.indice);

    out.writeString(this.texto);

    out.writeDouble(this.numero);

    out.writeLong(this.timestamp);

    out.writeString(this.uuid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.indice = in.readInt();

      this.texto = in.readString(this.texto instanceof Utf8 ? (Utf8)this.texto : null);

      this.numero = in.readDouble();

      this.timestamp = in.readLong();

      this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8)this.uuid : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.indice = in.readInt();
          break;

        case 1:
          this.texto = in.readString(this.texto instanceof Utf8 ? (Utf8)this.texto : null);
          break;

        case 2:
          this.numero = in.readDouble();
          break;

        case 3:
          this.timestamp = in.readLong();
          break;

        case 4:
          this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8)this.uuid : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










